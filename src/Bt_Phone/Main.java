package Bt_Phone;

import Bt_Phone.exception_phone.InvalidPhoneDataException;
import Bt_Phone.exception_phone.PhoneValidationException;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Main {

    private static final Logger logger = Logger.getLogger(Main.class.getName());
    private static final String PATH_PHONE_FILE = "src/Bt_Phone/phone.csv";
    static Scanner sc = new Scanner(System.in);
    static int choose;
    static int count;
    static ArrayList<Bt_Phone.Phone> phones = new ArrayList<>();

    public static void main(String[] args) {
        menuMain();
    }

    public static void menuMain() {
        initSampleData();
        // Menu ch√≠nh v·ªõi exception handling
        while (true) {
            try {
                showMainMenu();
                System.out.print("M·ªùi b·∫°n l·ª±a ch·ªçn: ");
                choose = getValidChoice(1, 9);

                switch (choose) {
                    case 1 -> menuShow();
                    case 2 -> menuAdd();
                    //case 3 -> menuUpdate();
                    case 3 -> menuUpdateToFile();
                    //case 4 -> menuDelete();
                    case 4 -> menuDeleteToFile();
                    //case 5 -> menuSort();
                    case 5 -> menuSortToFile();
                    case 6 -> menuFind();
                    case 7 -> menuSumTotal2();
                    case 8 -> menuVoucherOld();
                    case 9 -> {
                        if (confirmExit()) {
                            System.out.println("C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng ch∆∞∆°ng tr√¨nh!");
                            return;
                        }
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói kh√¥ng mong mu·ªën: " + e.getMessage());
                System.out.println("Vui l√≤ng th·ª≠ l·∫°i!\n");
            }
        }
    }

    /**
     * Hi·ªÉn th·ªã menu ch√≠nh
     */
    private static void showMainMenu() {
        System.out.println("=".repeat(100));
        System.out.println("                    MENU CH√çNH - CH∆Ø∆†NG TR√åNH QU·∫¢N L√ù ƒêI·ªÜN THO·∫†I");
        System.out.println("=".repeat(100));
        System.out.println("1.Xem danh s√°ch ƒëi·ªán tho·∫°i");
        System.out.println("2.Th√™m m·ªõi");
        System.out.println("3.C·∫≠p nh·∫≠t");
        System.out.println("4.X√≥a");
        System.out.println("5.S·∫Øp x·∫øp theo gi√°");
        System.out.println("6.T√¨m ki·∫øm");
        System.out.println("7.T√≠nh t·ªïng ti·ªÅn");
        System.out.println("8.Gi·∫£m gi√° cho ƒëi·ªán tho·∫°i c≈©");
        System.out.println("9.Tho√°t");
        System.out.println("=".repeat(100));
    }

    /**
     * L·∫•y l·ª±a ch·ªçn h·ª£p l·ªá t·ª´ ng∆∞·ªùi d√πng
     */
    private static int getValidChoice(int min, int max) {
        while (true) {
            try {
                String input = sc.nextLine().trim();
                if (input.isEmpty()) {
                    throw new IllegalArgumentException("L·ª±a ch·ªçn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                }

                int choice = Integer.parseInt(input);
                if (choice < min || choice > max) {
                    throw new IllegalArgumentException("L·ª±a ch·ªçn ph·∫£i t·ª´ " + min + " ƒë·∫øn " + max + "!");
                }

                return choice;

            } catch (NumberFormatException e) {
                System.out.println("L·ªói: Vui l√≤ng nh·∫≠p s·ªë nguy√™n!");
                System.out.print("Nh·∫≠p l·∫°i: ");
            } catch (IllegalArgumentException e) {
                System.out.println("L·ªói: " + e.getMessage());
                System.out.print("Nh·∫≠p l·∫°i: ");
            }
        }
    }

    /**
     * X√°c nh·∫≠n tho√°t ch∆∞∆°ng tr√¨nh
     */
    private static boolean confirmExit() {
        try {
            System.out.print("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tho√°t (Y/N)? ");
            String confirm = sc.nextLine().trim();
            return confirm.equalsIgnoreCase("y");
        } catch (Exception e) {
            System.err.println("L·ªói x√°c nh·∫≠n: " + e.getMessage());
            return false;
        }
    }

    // ==================== SAMPLE DATA ====================

    private static void initSampleData() {
        try {
            System.out.println("üîÑ ƒêang kh·ªüi t·∫°o d·ªØ li·ªáu m·∫´u...");

            phones.add(new NewPhone("DTM000", "iPhone 15 Pro Max", 25000000, "12", "iOS", "Apple", 5));
            phones.add(new NewPhone("DTM001", "Samsung Galaxy S24 Ultra", 20000000, "24", "Android", "Samsung", 3));
            phones.add(new OldPhone("DTC000", "iPhone 12 Pro", 15000000, "6", "iOS", "Apple", 85));
            phones.add(new OldPhone("DTC001", "Samsung Note 20", 12000000, "12", "Android", "Samsung", 70));

            System.out.println("ƒê√£ kh·ªüi t·∫°o " + phones.size() + " ƒëi·ªán tho·∫°i m·∫´u!\n");

        } catch (InvalidPhoneDataException e) {
            System.err.println("L·ªói kh·ªüi t·∫°o d·ªØ li·ªáu: " + e.getMessage());
        }
    }

    // ==================== MENU SHOW (CASE 1) ====================

    public static void menuShow() {
        while (true) {
            try {
                System.out.println("=".repeat(80));
                System.out.println("                    XEM DANH S√ÅCH ƒêI·ªÜN THO·∫†I");
                System.out.println("=".repeat(80));
                System.out.println("1.Xem t·∫•t c·∫£ ƒëi·ªán tho·∫°i");
                System.out.println("2.Xem ƒëi·ªán tho·∫°i c≈©");
                System.out.println("3.Xem ƒëi·ªán tho·∫°i m·ªõi");
                System.out.println("4.Quay l·∫°i menu ch√≠nh");
                System.out.println("=".repeat(80));

                System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
                choose = getValidChoice(1, 4);

                switch (choose) {
                    //case 1 -> showListAll();
                    case 1 -> showListAllFile();
                    //case 2 -> showListOld();
                    case 2 -> showListOldFile();
                    //case 3 -> showListNew();
                    case 3 -> showListNewFile();
                    case 4 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói menu hi·ªÉn th·ªã: " + e.getMessage());
            }
        }
    }

    public static void showListAll() {

        try {
            if (phones.isEmpty()) {
                System.out.println("üìã Danh s√°ch ƒëi·ªán tho·∫°i tr·ªëng!");
                return;
            }

            count = 0;
            System.out.println("=".repeat(60));
            System.out.println("        DANH S√ÅCH T·∫§T C·∫¢ ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(60));

            for (Bt_Phone.Phone p : phones) {
                System.out.println("ƒêi·ªán tho·∫°i th·ª© " + ++count);
                p.output();
                System.out.println();
            }
        } catch (Exception e) {
            System.err.println("L·ªói hi·ªÉn th·ªã danh s√°ch: " + e.getMessage());
        }
    }


    public static void showListOld() {
        try {
            count = 0;
            System.out.println("=".repeat(60));
            System.out.println("        DANH S√ÅCH ƒêI·ªÜN THO·∫†I C≈®");
            System.out.println("=".repeat(60));

            for (Bt_Phone.Phone p : phones) {
                if (p instanceof OldPhone) {
                    System.out.println("ƒêi·ªán tho·∫°i c≈© th·ª© " + ++count);
                    p.output();
                    System.out.println();
                }
            }

            if (count == 0) {
                System.out.println("Kh√¥ng c√≥ ƒëi·ªán tho·∫°i c≈© n√†o!");
            }
        } catch (Exception e) {
            System.err.println("L·ªói hi·ªÉn th·ªã ƒëi·ªán tho·∫°i c≈©: " + e.getMessage());
        }
    }


    public static void showListNew() {
        try {
            count = 0;
            System.out.println("=".repeat(60));
            System.out.println("        DANH S√ÅCH ƒêI·ªÜN THO·∫†I M·ªöI");
            System.out.println("=".repeat(60));

            for (Bt_Phone.Phone p : phones) {
                if (p instanceof NewPhone) {
                    System.out.println("ƒêi·ªán tho·∫°i m·ªõi th·ª© " + ++count);
                    p.output();
                    System.out.println();
                }
            }

            if (count == 0) {
                System.out.println("Kh√¥ng c√≥ ƒëi·ªán tho·∫°i m·ªõi n√†o!");
            }
        } catch (Exception e) {
            System.err.println("L·ªói hi·ªÉn th·ªã ƒëi·ªán tho·∫°i m·ªõi: " + e.getMessage());
        }
    }


    public static void menuAdd() {
        while (true) {
            try {
                System.out.println("=".repeat(80));
                System.out.println("                    TH√äM M·ªöI ƒêI·ªÜN THO·∫†I");
                System.out.println("=".repeat(80));
                System.out.println("1.Th√™m ƒëi·ªán tho·∫°i c≈©");
                System.out.println("2.Th√™m ƒëi·ªán tho·∫°i m·ªõi");
                System.out.println("3.Quay l·∫°i menu ch√≠nh");
                System.out.println("=".repeat(80));

                System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
                choose = getValidChoice(1, 3);

                switch (choose) {
                    //case 1 -> addOldPhone();
                    case 1 -> addOldPhoneToFile();
                    //case 2 -> addNewPhone();
                    case 2 -> addNewPhoneToFile();
                    case 3 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói menu th√™m: " + e.getMessage());
            }
        }
    }

    // ==================== ID GENERATION ====================

    private static String getIdentityId(String prefix, Class<?> clazz) {
        try {
            int max = -1;

            // T√¨m ID cao nh·∫•t hi·ªán c√≥
            for (Bt_Phone.Phone e : phones) {
                if (clazz.isInstance(e)) {
                    String idStr = e.getPhoneId().substring(prefix.length());
                    int id = Integer.parseInt(idStr);
                    if (id > max) {
                        max = id;
                    }
                }
            }

            // TƒÉng l√™n 1
            max++;

            // N·∫øu v∆∞·ª£t 999, t√¨m ID tr·ªëng t·ª´ 000-999
            if (max > 999) {
                ArrayList<Integer> existingIds = new ArrayList<>();
                for (Bt_Phone.Phone e : phones) {
                    if (clazz.isInstance(e)) {
                        String idStr = e.getPhoneId().substring(prefix.length());
                        int id = Integer.parseInt(idStr);
                        existingIds.add(id);
                    }
                }

                max = -1;
                for (int i = 0; i <= 999; i++) {
                    if (!existingIds.contains(i)) {
                        max = i;
                        break;
                    }
                }

                if (max == -1) {
                    throw new RuntimeException("ƒê√£ h·∫øt ID c√≥ th·ªÉ t·∫°o! (0-999 ƒë√£ ƒë·∫ßy)");
                }
            }

            return String.format("%s%03d", prefix, max);

        } catch (Exception e) {
            throw new RuntimeException("L·ªói t·∫°o ID: " + e.getMessage());
        }
    }

    public static void addNewPhone() {
        try {
            System.out.println("=".repeat(60));
            System.out.println("        TH√äM ƒêI·ªÜN THO·∫†I M·ªöI");
            System.out.println("=".repeat(60));

            NewPhone newPhone = new NewPhone();
            newPhone.input(sc);

            String newId = getIdentityId("DTM", NewPhone.class);
            newPhone.setPhoneId(newId);

            // Validate tr∆∞·ªõc khi th√™m
            newPhone.validate();

            phones.add(newPhone);
            System.out.println("Th√™m ƒëi·ªán tho·∫°i m·ªõi th√†nh c√¥ng! ID: " + newId);

        } catch (PhoneValidationException e) {
            System.err.println("L·ªói validation: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Th√™m ƒëi·ªán tho·∫°i m·ªõi th·∫•t b·∫°i: " + e.getMessage());
        }
    }


    public static void addOldPhone() {
        try {
            System.out.println("=".repeat(60));
            System.out.println("        TH√äM ƒêI·ªÜN THO·∫†I C≈®");
            System.out.println("=".repeat(60));

            OldPhone oldPhone = new OldPhone();
            oldPhone.input(sc);

            String newId = getIdentityId("DTC", OldPhone.class);
            oldPhone.setPhoneId(newId);

            // Validate tr∆∞·ªõc khi th√™m
            oldPhone.validate();

            phones.add(oldPhone);
            System.out.println("Th√™m ƒëi·ªán tho·∫°i c≈© th√†nh c√¥ng! ID: " + newId); // ‚úÖ S·ª¨A: "c≈©" thay v√¨ "m·ªõi"

        } catch (PhoneValidationException e) {
            System.err.println("L·ªói validation: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("Th√™m ƒëi·ªán tho·∫°i c≈© th·∫•t b·∫°i: " + e.getMessage());
        }
    }


    // ==================== UPDATE (CASE 3) ====================

    public static void menuUpdate() {
        try {
            System.out.println("=".repeat(80));
            System.out.println("                    C·∫¨P NH·∫¨T ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(80));

            String id = getValidPhoneId("c·∫≠p nh·∫≠t th√¥ng tin");

            boolean isFound = false;
            for (Bt_Phone.Phone p : phones) {
                if (p.getPhoneId().equalsIgnoreCase(id)) {
                    isFound = true;
                    System.out.println("T√¨m th·∫•y ƒëi·ªán tho·∫°i. Nh·∫≠p th√¥ng tin m·ªõi:");
                    p.input(sc);
                    p.validate();
                    System.out.println("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                    break;
                }
            }

            if (!isFound) {
                System.out.println("Kh√¥ng t√¨m th·∫•y ID mu·ªën c·∫≠p nh·∫≠t!");
            }

        } catch (Exception e) {
            System.err.println("L·ªói c·∫≠p nh·∫≠t: " + e.getMessage());
        }
    }

    public static void menuUpdateToFile() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            System.out.println("=".repeat(80));
            System.out.println("                    C·∫¨P NH·∫¨T ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(80));

            String id = getValidPhoneId("c·∫≠p nh·∫≠t th√¥ng tin");

            boolean isFound = false;
            for (Phone p : phones1) {
                if (p.getPhoneId().equalsIgnoreCase(id)) {
                    isFound = true;
                    System.out.println("üì± T√¨m th·∫•y ƒëi·ªán tho·∫°i. Nh·∫≠p th√¥ng tin m·ªõi:");
                    p.input(sc);
                    p.validate();
                    System.out.println("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                    break;
                }
            }

            if (!isFound) {
                System.out.println("Kh√¥ng t√¨m th·∫•y ID mu·ªën c·∫≠p nh·∫≠t!");
            }

        } catch (Exception e) {
            System.err.println("L·ªói c·∫≠p nh·∫≠t: " + e.getMessage());
        }
        writeFile(phones1);
    }


    // ==================== DELETE (CASE 4) ====================

    public static void menuDelete() {
        try {
            System.out.println("=".repeat(80));
            System.out.println("                    X√ìA ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(80));

            String id = getValidPhoneId("x√≥a");

            boolean isFound = false;
            for (int i = 0; i < phones.size(); i++) {
                Bt_Phone.Phone p = phones.get(i);
                if (p.getPhoneId().equalsIgnoreCase(id)) {
                    isFound = true;

                    System.out.println("T√¨m th·∫•y ƒëi·ªán tho·∫°i:");
                    p.output();

                    System.out.print("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒëi·ªán tho·∫°i n√†y (Y/N)? ");
                    String confirm = sc.nextLine().trim();

                    if (confirm.equalsIgnoreCase("y")) {
                        phones.remove(i);
                        System.out.println("X√≥a th√†nh c√¥ng!");
                    } else {
                        System.out.println("H·ªßy x√≥a.");
                    }
                    break;
                }
            }

            if (!isFound) {
                System.out.println("Kh√¥ng t√¨m th·∫•y ID mu·ªën x√≥a!");
            }

        } catch (Exception e) {
            System.err.println("L·ªói x√≥a: " + e.getMessage());
        }
    }


    /**
     * L·∫•y ID ƒëi·ªán tho·∫°i h·ª£p l·ªá t·ª´ ng∆∞·ªùi d√πng
     */
    private static String getValidPhoneId(String action) {
        while (true) {
            try {
                System.out.print("Nh·∫≠p ID ƒëi·ªán tho·∫°i mu·ªën " + action + ": ");
                String id = sc.nextLine().trim().toUpperCase();

                if (id.isEmpty()) {
                    throw new IllegalArgumentException("ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                }

                if (!(id.startsWith("DTC") || id.startsWith("DTM")) || id.length() != 6) {
                    throw new IllegalArgumentException("ID kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng! ID ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng DTC ho·∫∑c DTM v√† c√≥ 6 k√Ω t·ª±.");
                }

                return id;

            } catch (IllegalArgumentException e) {
                System.out.println("L·ªói: " + e.getMessage());
            }
        }
    }

    // ==================== SORT (CASE 5) ====================

    public static void menuSort() {
        while (true) {
            try {
                System.out.println("=".repeat(80));
                System.out.println("                    S·∫ÆP X·∫æP ƒêI·ªÜN THO·∫†I");
                System.out.println("=".repeat(80));
                System.out.println("1.TƒÉng d·∫ßn theo gi√°");
                System.out.println("2.Gi·∫£m d·∫ßn theo gi√°");
                System.out.println("3.Quay l·∫°i menu ch√≠nh");
                System.out.println("=".repeat(80));

                System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
                choose = getValidChoice(1, 3);

                switch (choose) {
                    case 1 -> {
                        Collections.sort(phones);
                        System.out.println("ƒê√£ s·∫Øp x·∫øp tƒÉng d·∫ßn theo gi√°!");
                        showListAll();
                    }
                    case 2 -> {
                        phones.sort(new PhoneComperator());
                        System.out.println("ƒê√£ s·∫Øp x·∫øp gi·∫£m d·∫ßn theo gi√°!");
                        showListAll();
                    }
                    case 3 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói s·∫Øp x·∫øp: " + e.getMessage());
            }
        }
    }

    public static void menuSortToFile() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        while (true) {
            try {
                System.out.println("=".repeat(80));
                System.out.println("                    S·∫ÆP X·∫æP ƒêI·ªÜN THO·∫†I");
                System.out.println("=".repeat(80));
                System.out.println("1.TƒÉng d·∫ßn theo gi√°");
                System.out.println("2.Gi·∫£m d·∫ßn theo gi√°");
                System.out.println("3.Quay l·∫°i menu ch√≠nh");
                System.out.println("=".repeat(80));

                System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
                choose = getValidChoice(1, 3);

                switch (choose) {
                    case 1 -> {
                        Collections.sort(phones1);
                        System.out.println("ƒê√£ s·∫Øp x·∫øp tƒÉng d·∫ßn theo gi√°!");
                        showListAllFile();
                    }
                    case 2 -> {
                        phones1.sort(new PhoneComperator());
                        System.out.println("ƒê√£ s·∫Øp x·∫øp gi·∫£m d·∫ßn theo gi√°!");
                        showListAllFile();
                    }
                    case 3 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói s·∫Øp x·∫øp: " + e.getMessage());
            }
            writeFile(phones1);
        }

    }

    // ==================== SEARCH (CASE 6) ====================

    public static void menuFind() {
        while (true) {
            try {
                System.out.println("=".repeat(80));
                System.out.println("                    T√åM KI·∫æM ƒêI·ªÜN THO·∫†I");
                System.out.println("=".repeat(80));
                System.out.println("1.T√¨m trong t·∫•t c·∫£ ƒëi·ªán tho·∫°i");
                System.out.println("2.T√¨m trong ƒëi·ªán tho·∫°i c≈©");
                System.out.println("3.T√¨m trong ƒëi·ªán tho·∫°i m·ªõi");
                System.out.println("4.Quay l·∫°i menu ch√≠nh");
                System.out.println("=".repeat(80));

                System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
                choose = getValidChoice(1, 4);

                switch (choose) {
                    //case 1 -> menuFindInAll();
                    case 1 -> menuFindInAllToFile();
                    // case 2 -> menuFindInOld();
                    case 2 -> menuFindInOldToFile();
                    //case 3 -> menuFindInNew();
                    case 3 -> menuFindInNewToFile();
                    case 4 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói menu t√¨m ki·∫øm: " + e.getMessage());
            }
        }
    }

    // C√°c method menu t√¨m ki·∫øm gi·ªØ nguy√™n nh∆∞ng th√™m exception handling
    public static void menuFindInAll() {
        while (true) {
            try {
                showSearchSubmenu();
                choose = getValidChoice(1, 4);

                switch (choose) {
                    case 1 -> findByPrice(Bt_Phone.Phone.class);
                    case 2 -> findByName(Bt_Phone.Phone.class);
                    case 3 -> findByCompany(Bt_Phone.Phone.class);
                    case 4 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói t√¨m ki·∫øm: " + e.getMessage());
            }
        }
    }

    public static void menuFindInOld() {
        while (true) {
            try {
                showSearchSubmenu();
                choose = getValidChoice(1, 4);

                switch (choose) {
                    case 1 -> findByPrice(OldPhone.class);
                    case 2 -> findByName(OldPhone.class);
                    case 3 -> findByCompany(OldPhone.class);
                    case 4 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói t√¨m ki·∫øm: " + e.getMessage());
            }
        }
    }

    public static void menuFindInNew() {
        while (true) {
            try {
                showSearchSubmenu();
                choose = getValidChoice(1, 4);

                switch (choose) {
                    case 1 -> findByPrice(NewPhone.class);
                    case 2 -> findByName(NewPhone.class);
                    case 3 -> findByCompany(NewPhone.class);
                    case 4 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói t√¨m ki·∫øm: " + e.getMessage());
            }
        }
    }


    // C√°c method menu t√¨m ki·∫øm gi·ªØ nguy√™n nh∆∞ng th√™m exception handling
    public static void menuFindInAllToFile() {
        while (true) {
            try {
                showSearchSubmenu();
                choose = getValidChoice(1, 4);

                switch (choose) {
                    case 1 -> findByPriceToFile(Bt_Phone.Phone.class);
                    case 2 -> findByNameToFile(Bt_Phone.Phone.class);
                    case 3 -> findByCompanyToFile(Bt_Phone.Phone.class);
                    case 4 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói t√¨m ki·∫øm: " + e.getMessage());
            }
        }
    }

    public static void menuFindInOldToFile() {
        while (true) {
            try {
                showSearchSubmenu();
                choose = getValidChoice(1, 4);

                switch (choose) {
                    case 1 -> findByPriceToFile(OldPhone.class);
                    case 2 -> findByNameToFile(OldPhone.class);
                    case 3 -> findByCompanyToFile(OldPhone.class);
                    case 4 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói t√¨m ki·∫øm: " + e.getMessage());
            }
        }
    }

    public static void menuFindInNewToFile() {
        while (true) {
            try {
                showSearchSubmenu();
                choose = getValidChoice(1, 4);

                switch (choose) {
                    case 1 -> findByPriceToFile(NewPhone.class);
                    case 2 -> findByNameToFile(NewPhone.class);
                    case 3 -> findByCompanyToFile(NewPhone.class);
                    case 4 -> {
                        return;
                    }
                }
            } catch (Exception e) {
                System.err.println("L·ªói t√¨m ki·∫øm: " + e.getMessage());
            }
        }
    }

    private static void showSearchSubmenu() {
        System.out.println("=".repeat(60));
        System.out.println("        T√åM KI·∫æM ƒêI·ªÜN THO·∫†I");
        System.out.println("=".repeat(60));
        System.out.println("1.T√¨m ki·∫øm theo gi√°");
        System.out.println("2.T√¨m ki·∫øm theo t√™n");
        System.out.println("3.T√¨m ki·∫øm theo h√£ng");
        System.out.println("4.Quay l·∫°i menu t√¨m ki·∫øm");
        System.out.println("=".repeat(60));
        System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
    }

    // ==================== SEARCH METHODS ====================

    public static void findByPrice(Class<?> clazz) {
        try {
            System.out.println("T√åM KI·∫æM THEO KHO·∫¢NG GI√Å");
            System.out.println("-".repeat(40));

            double minPrice = getValidPrice("Nh·∫≠p gi√° t·ª´ (VND): ");
            double maxPrice = getValidPrice("Nh·∫≠p gi√° ƒë·∫øn (VND): ");

            // ƒê·∫£m b·∫£o min <= max
            if (minPrice > maxPrice) {
                double temp = maxPrice;
                maxPrice = minPrice;
                minPrice = temp;
                System.out.println("ƒê√£ ho√°n ƒë·ªïi gi√° tr·ªã ƒë·ªÉ minPrice <= maxPrice");
            }

            boolean found = false;
            count = 0;

            System.out.println("\nK·∫øt qu·∫£ t√¨m ki·∫øm:");
            System.out.println("=".repeat(50));

            for (Bt_Phone.Phone p : phones) {
                if (clazz.isInstance(p) && p.getPhonePrice() >= minPrice && p.getPhonePrice() <= maxPrice) {
                    System.out.println(" ƒêi·ªán tho·∫°i th·ª© " + ++count);
                    p.output();
                    System.out.println();
                    found = true;
                }
            }

            if (!found) {
                System.out.printf(" Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i n·∫±m trong kho·∫£ng %,.0f VND ƒë·∫øn %,.0f VND\n",
                        minPrice, maxPrice);
            } else {
                System.out.println(" T√¨m th·∫•y " + count + " ƒëi·ªán tho·∫°i ph√π h·ª£p!");
            }

        } catch (Exception e) {
            System.err.println(" L·ªói t√¨m ki·∫øm theo gi√°: " + e.getMessage());
        }
    }

    public static void findByName(Class<?> clazz) {
        try {
            System.out.print("Nh·∫≠p t√™n ƒëi·ªán tho·∫°i c·∫ßn t√¨m: ");
            String keyword = sc.nextLine().trim();

            if (keyword.isEmpty()) {
                System.out.println(" T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                return;
            }

            boolean found = false;
            count = 0;

            System.out.println("\n K·∫øt qu·∫£ t√¨m ki·∫øm t√™n ch·ª©a: '" + keyword + "'");
            System.out.println("=".repeat(50));

            for (Bt_Phone.Phone p : phones) {
                if (clazz.isInstance(p)) {
                    if (p.getPhoneName().toLowerCase().contains(keyword.toLowerCase())) {
                        System.out.println("üì± ƒêi·ªán tho·∫°i th·ª© " + ++count);
                        p.output();
                        System.out.println();
                        found = true;
                    }
                }
            }

            if (!found) {
                System.out.println(" Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i c√≥ t√™n ch·ª©a: '" + keyword + "'");
            } else {
                System.out.println(" T√¨m th·∫•y " + count + " ƒëi·ªán tho·∫°i ph√π h·ª£p!");
            }

        } catch (Exception e) {
            System.err.println(" L·ªói t√¨m ki·∫øm theo t√™n: " + e.getMessage());
        }
    }

    public static void findByCompany(Class<?> clazz) {
        try {
            System.out.print(" Nh·∫≠p t√™n h√£ng ƒëi·ªán tho·∫°i c·∫ßn t√¨m: ");
            String keyword = sc.nextLine().trim();

            if (keyword.isEmpty()) {
                System.out.println(" T√™n h√£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                return;
            }

            boolean found = false;
            count = 0;

            System.out.println("\n K·∫øt qu·∫£ t√¨m ki·∫øm h√£ng ch·ª©a: '" + keyword + "'");
            System.out.println("=".repeat(50));

            for (Bt_Phone.Phone p : phones) {
                if (clazz.isInstance(p)) {

                    if (p.getPhoneCompany().toLowerCase().contains(keyword.toLowerCase())) {
                        System.out.println("ƒêi·ªán tho·∫°i th·ª© " + ++count);
                        p.output();
                        System.out.println();
                        found = true;
                    }
                }
            }

            if (!found) {
                System.out.println("Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i c·ªßa h√£ng: '" + keyword + "'");
            } else {
                System.out.println("T√¨m th·∫•y " + count + " ƒëi·ªán tho·∫°i ph√π h·ª£p!");
            }

        } catch (Exception e) {
            System.err.println("L·ªói t√¨m ki·∫øm theo h√£ng: " + e.getMessage());
        }
    }

    /**
     * L·∫•y gi√° h·ª£p l·ªá t·ª´ ng∆∞·ªùi d√πng
     */
    private static double getValidPrice(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                String input = sc.nextLine().trim();

                if (input.isEmpty()) {
                    throw new IllegalArgumentException("Gi√° kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                }

                double price = Double.parseDouble(input);

                if (price < 0) {
                    throw new IllegalArgumentException("Gi√° ph·∫£i >= 0!");
                }

                return price;

            } catch (NumberFormatException e) {
                System.out.println("L·ªói: Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá!");
            } catch (IllegalArgumentException e) {
                System.out.println("L·ªói: " + e.getMessage());
            }
        }
    }

    // ==================== TOTAL CALCULATION (CASE 7) ====================

    public static void menuSumTotal2() {
        try {
            double sumAllTotalNew = 0, sumAllTotalOld = 0;
            int countNew = 0, countOld = 0;

            for (Bt_Phone.Phone p : phones) {
                if (p instanceof OldPhone o) {
                    sumAllTotalOld += o.phonePrice();
                    countOld++;
                } else if (p instanceof NewPhone n) {
                    sumAllTotalNew += n.phonePrice();
                    countNew++;
                }
            }

            System.out.println("=".repeat(80));
            System.out.println("                    T·ªîNG K·∫æT GI√Å TR·ªä ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(80));
            System.out.println("ƒêi·ªán tho·∫°i c≈©:");
            System.out.println("   ‚Ä¢ S·ªë l∆∞·ª£ng: " + countOld + " chi·∫øc");
            System.out.println("   ‚Ä¢ T·ªïng gi√° tr·ªã: " + String.format("%,.0f VND", sumAllTotalOld));
            System.out.println();
            System.out.println("ƒêi·ªán tho·∫°i m·ªõi:");
            System.out.println("   ‚Ä¢ S·ªë l∆∞·ª£ng: " + countNew + " chi·∫øc");
            System.out.println("   ‚Ä¢ T·ªïng gi√° tr·ªã: " + String.format("%,.0f VND", sumAllTotalNew));
            System.out.println();
            System.out.println("T·ªîNG C·ªòNG T·∫§T C·∫¢:");
            System.out.println("   ‚Ä¢ T·ªïng s·ªë l∆∞·ª£ng: " + (countOld + countNew) + " chi·∫øc");
            System.out.println("   ‚Ä¢ T·ªïng gi√° tr·ªã: " + String.format("%,.0f VND", (sumAllTotalOld + sumAllTotalNew)));
            System.out.println("=".repeat(80));

        } catch (Exception e) {
            System.err.println("L·ªói t√≠nh t·ªïng ti·ªÅn: " + e.getMessage());
        }
    }

    // ==================== DISCOUNT (CASE 8) ====================

    public static void menuVoucherOld() { // ‚úÖ S·ª¨A: ƒê·ªïi t√™n t·ª´ menuVocherO
        try {
            System.out.println("=".repeat(80));
            System.out.println("                    GI·∫¢M GI√Å CHO ƒêI·ªÜN THO·∫†I C≈®");
            System.out.println("=".repeat(80));

            // ƒê·∫øm s·ªë ƒëi·ªán tho·∫°i c≈©
            int oldPhoneCount = 0;
            for (Bt_Phone.Phone p : phones) {
                if (p instanceof OldPhone) {
                    oldPhoneCount++;
                }
            }

            if (oldPhoneCount == 0) {
                System.out.println("Kh√¥ng c√≥ ƒëi·ªán tho·∫°i c≈© n√†o ƒë·ªÉ √°p d·ª•ng gi·∫£m gi√°!");
                return;
            }

            System.out.println("T√¨m th·∫•y " + oldPhoneCount + " ƒëi·ªán tho·∫°i c≈©");

            int discountRate = getValidDiscountRate();

            System.out.println("\n√Åp d·ª•ng gi·∫£m gi√° " + discountRate + "% cho t·∫•t c·∫£ ƒëi·ªán tho·∫°i c≈©...");
            System.out.println("=".repeat(60));

            int appliedCount = 0;
            for (Bt_Phone.Phone p : phones) {
                if (p instanceof OldPhone o) {
                    try {
                        double oldPrice = o.getPhonePrice();
                        o.promote(discountRate);
                        double newPrice = o.getPhonePrice();

                        System.out.println("üì± " + o.getPhoneName() + " (" + o.getPhoneId() + "):");
                        System.out.println("   Gi√° c≈©: " + String.format("%,.0f VND", oldPrice));
                        System.out.println("   Gi√° m·ªõi: " + String.format("%,.0f VND", newPrice));
                        System.out.println("   Ti·∫øt ki·ªám: " + String.format("%,.0f VND", oldPrice - newPrice));
                        System.out.println();

                        appliedCount++;
                    } catch (Exception e) {
                        System.err.println("L·ªói √°p d·ª•ng gi·∫£m gi√° cho " + o.getPhoneId() + ": " + e.getMessage());
                    }
                }
            }

            System.out.println(" ƒê√£ √°p d·ª•ng gi·∫£m gi√° " + discountRate + "% cho " + appliedCount + " ƒëi·ªán tho·∫°i c≈©!");

        } catch (Exception e) {
            System.err.println(" L·ªói gi·∫£m gi√°: " + e.getMessage());
        }
    }

    /**
     * L·∫•y t·ª∑ l·ªá gi·∫£m gi√° h·ª£p l·ªá
     */
    private static int getValidDiscountRate() {
        while (true) {
            try {
                System.out.print("Nh·∫≠p t·ª∑ l·ªá gi·∫£m gi√° cho ƒëi·ªán tho·∫°i c≈© (0-100%): ");
                String input = sc.nextLine().trim();

                if (input.isEmpty()) {
                    throw new IllegalArgumentException("T·ª∑ l·ªá gi·∫£m gi√° kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                }

                int rate = Integer.parseInt(input);

                if (rate < 0 || rate > 100) {
                    throw new IllegalArgumentException("T·ª∑ l·ªá gi·∫£m gi√° ph·∫£i t·ª´ 0-100%!");
                }

                return rate;

            } catch (NumberFormatException e) {
                System.out.println(" L·ªói: Vui l√≤ng nh·∫≠p s·ªë nguy√™n!");
            } catch (IllegalArgumentException e) {
                System.out.println(" L·ªói: " + e.getMessage());
            }
        }
    }


    /** FILE*/
    /**
     * x·ª≠ l√Ω file
     */
    public static List<Phone> readFile(String path) {
        File file = new File(path);
        List<Phone> phones1 = new ArrayList<>();

        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(file))) {
            // ƒê·ªçc v√† b·ªè qua header
            String header = bufferedReader.readLine();
            if (header == null) {
                System.out.println(" File tr·ªëng ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c!");
                return phones1;
            }
            String line;
            int lineNumber = 1;

            while ((line = bufferedReader.readLine()) != null) {
                lineNumber++;

                if (line.trim().isEmpty()) {
                    continue;
                }

                try {
                    String[] data = line.split(",", -1); // -1 ƒë·ªÉ gi·ªØ empty strings
                    if (data.length < 7) {
                        System.err.println(" D√≤ng " + lineNumber + " kh√¥ng ƒë·ªß c·ªôt: " + line);
                        continue;
                    }
                    String id = data[0].trim();
                    if (id.startsWith("DTC")) {
                        OldPhone oldPhone = new OldPhone();

                        oldPhone.setPhoneId(data[0].trim());
                        oldPhone.setPhoneName(data[1].trim());
                        oldPhone.setPhonePrice(parseDouble(data[2].trim()));
                        oldPhone.setPhoneWarranty(data[3].trim());
                        String company = data[4].trim();
                        String phoneType = company.equalsIgnoreCase("Apple") ? "iOS" : "Android";
                        oldPhone.setPhoneType(phoneType);
                        oldPhone.setPhoneCompany(company);

                        if (!data[5].trim().isEmpty()) {
                            oldPhone.setBatteryStatus(Integer.parseInt(data[5].trim()));
                        } else {
                            oldPhone.setBatteryStatus(80);
                        }


                        phones1.add(oldPhone);


                    } else if (id.startsWith("DTM")) {

                        NewPhone newPhone = new NewPhone();

                        newPhone.setPhoneId(data[0].trim());
                        newPhone.setPhoneName(data[1].trim());
                        newPhone.setPhonePrice(parseDouble(data[2].trim()));
                        newPhone.setPhoneWarranty(data[3].trim());


                        String company = data[4].trim();
                        String phoneType = company.equalsIgnoreCase("Apple") ? "iOS" : "Android";
                        newPhone.setPhoneType(phoneType);
                        newPhone.setPhoneCompany(company);


                        if (data.length > 6 && !data[6].trim().isEmpty()) {
                            newPhone.setPhoneNumber(Integer.parseInt(data[6].trim()));
                        } else {
                            newPhone.setPhoneNumber(1);
                        }


                        phones1.add(newPhone);


                    } else {
                        System.err.println(" ID kh√¥ng h·ª£p l·ªá ·ªü d√≤ng " + lineNumber + ": " + id);
                    }

                } catch (NumberFormatException e) {
                    System.err.println(" L·ªói parse s·ªë ·ªü d√≤ng " + lineNumber + ": " + e.getMessage());
                } catch (Exception e) {
                    System.err.println(" L·ªói x·ª≠ l√Ω d√≤ng " + lineNumber + ": " + e.getMessage());
                }
            }

        } catch (FileNotFoundException e) {
            System.err.println(" Kh√¥ng t√¨m th·∫•y file: " + path);
            logger.log(Level.SEVERE, "File kh√¥ng t·ªìn t·∫°i: " + path, e);
        } catch (IOException e) {
            System.err.println(" L·ªói ƒë·ªçc file: " + e.getMessage());
            logger.log(Level.SEVERE, "L·ªói khi ƒë·ªçc file", e);
        }

        return phones1;
    }

    /**
     * Parse double an to√†n, x·ª≠ l√Ω scientific notation
     */
    private static double parseDouble(String value) {
        if (value == null || value.trim().isEmpty()) {
            return 0.0;
        }
        // X·ª≠ l√Ω scientific notation nh∆∞ 2.0E7 ‚Üí 20000000
        return Double.parseDouble(value);
    }


    public static void showList() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        for (Phone s : phones1) {
            System.out.println("\nTh√¥ng tin sinh vi√™n v·ªõi ID: " + s.getPhoneId());
            s.output();
        }
    }

    private static void writeFile(List<Phone> phones1) {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("ID,T√™n ƒëi·ªán tho·∫°i,Gi√° b√°n,Th·ªùi gian b·∫£o h√†nh,Lo·∫°i ƒëi·ªán tho·∫°i,H√£ng s·∫£n xu·∫•t,T√¨nh tr·∫°ng pin (%),S·ªë l∆∞·ª£ng");

        for (Phone phone : phones1) {
            stringBuilder.append("\n");


            if (phone instanceof OldPhone oldPhone) {
                stringBuilder.append(String.format("%s,%s,%.0f,%s,%s,%s,%d,",
                        oldPhone.getPhoneId(),
                        oldPhone.getPhoneName(),
                        oldPhone.getPhonePrice(),
                        oldPhone.getPhoneWarranty(),
                        oldPhone.getPhoneType(),
                        oldPhone.getPhoneCompany(),
                        oldPhone.getBatteryStatus()
                ));
            } else if (phone instanceof NewPhone newPhone) {
                stringBuilder.append(String.format("%s,%s,%.0f,%s,%s,%s,,%d",
                        newPhone.getPhoneId(),
                        newPhone.getPhoneName(),
                        newPhone.getPhonePrice(),
                        newPhone.getPhoneWarranty(),
                        newPhone.getPhoneType(),
                        newPhone.getPhoneCompany(),
                        newPhone.getPhoneNumber()
                ));
            }
        }

        File file = new File(PATH_PHONE_FILE);
        try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file))) {
            bufferedWriter.write(stringBuilder.toString());
            System.out.println("ƒê√£ ghi file th√†nh c√¥ng!");
        } catch (IOException e) {
            logger.log(Level.SEVERE, "L·ªói khi ghi file", e);
            System.err.println("L·ªói ghi file: " + e.getMessage());
        }
    }

    public static void showListAllFile() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            if (phones1.isEmpty()) {
                System.out.println(" Danh s√°ch ƒëi·ªán tho·∫°i tr·ªëng!");
                return;
            }

            count = 0;
            System.out.println("=".repeat(60));
            System.out.println("        DANH S√ÅCH T·∫§T C·∫¢ ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(60));

            for (Phone s : phones1) {
                System.out.println("\nTh√¥ng tin ƒëi·ªán tho·∫°i v·ªõi ID: " + s.getPhoneId());
                s.output();

            }
        } catch (Exception e) {
            System.err.println(" L·ªói hi·ªÉn th·ªã danh s√°ch: " + e.getMessage());
        }
    }

    public static void showListNewFile() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            if (phones1.isEmpty()) {
                System.out.println(" Danh s√°ch ƒëi·ªán tho·∫°i tr·ªëng!");
                return;
            }

            count = 0;
            System.out.println("=".repeat(60));
            System.out.println("        DANH S√ÅCH T·∫§T C·∫¢ ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(60));

            for (Phone s : phones1) {
                if (s.getPhoneId().startsWith("DTM")) {
                    System.out.println("\nTh√¥ng tin ƒëi·ªán tho·∫°i v·ªõi ID: " + s.getPhoneId());
                    s.output();
                }

            }
        } catch (Exception e) {
            System.err.println(" L·ªói hi·ªÉn th·ªã danh s√°ch: " + e.getMessage());
        }
    }

    public static void showListOldFile() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            if (phones1.isEmpty()) {
                System.out.println(" Danh s√°ch ƒëi·ªán tho·∫°i tr·ªëng!");
                return;
            }

            count = 0;
            System.out.println("=".repeat(60));
            System.out.println("        DANH S√ÅCH T·∫§T C·∫¢ ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(60));

            for (Phone s : phones1) {
                if (s.getPhoneId().startsWith("DTC")) {
                    System.out.println("\nTh√¥ng tin ƒëi·ªán tho·∫°i v·ªõi ID: " + s.getPhoneId());
                    s.output();
                }

            }
        } catch (Exception e) {
            System.err.println(" L·ªói hi·ªÉn th·ªã danh s√°ch: " + e.getMessage());
        }
    }

    public static void addOldPhoneToFile() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            System.out.println("=".repeat(60));
            System.out.println("        TH√äM ƒêI·ªÜN THO·∫†I M·ªöI");
            System.out.println("=".repeat(60));

            OldPhone oldPhone = new OldPhone();
            oldPhone.input(sc);

            String newId = getIdentityId("DTC", NewPhone.class);
            oldPhone.setPhoneId(newId);

            // Validate tr∆∞·ªõc khi th√™m
            oldPhone.validate();

            phones1.add(oldPhone);
            System.out.println(" Th√™m ƒëi·ªán tho·∫°i m·ªõi th√†nh c√¥ng! ID: " + newId);

        } catch (PhoneValidationException e) {
            System.err.println(" L·ªói validation: " + e.getMessage());
        } catch (Exception e) {
            System.err.println(" Th√™m ƒëi·ªán tho·∫°i m·ªõi th·∫•t b·∫°i: " + e.getMessage());
        }

        writeFile(phones1);
    }

    public static void addNewPhoneToFile() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            System.out.println("=".repeat(60));
            System.out.println("        TH√äM ƒêI·ªÜN THO·∫†I M·ªöI");
            System.out.println("=".repeat(60));

            NewPhone newPhone = new NewPhone();
            newPhone.input(sc);

            String newId = getIdentityId("DTM", NewPhone.class);
            newPhone.setPhoneId(newId);

            // Validate tr∆∞·ªõc khi th√™m
            newPhone.validate();

            phones1.add(newPhone);
            System.out.println(" Th√™m ƒëi·ªán tho·∫°i m·ªõi th√†nh c√¥ng! ID: " + newId);

        } catch (PhoneValidationException e) {
            System.err.println(" L·ªói validation: " + e.getMessage());
        } catch (Exception e) {
            System.err.println(" Th√™m ƒëi·ªán tho·∫°i m·ªõi th·∫•t b·∫°i: " + e.getMessage());
        }

        writeFile(phones1);
    }

    public static void findByPriceToFile(Class<?> clazz) {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            System.out.println("T√åM KI·∫æM THEO KHO·∫¢NG GI√Å");
            System.out.println("-".repeat(40));

            double minPrice = getValidPrice("Nh·∫≠p gi√° t·ª´ (VND): ");
            double maxPrice = getValidPrice("Nh·∫≠p gi√° ƒë·∫øn (VND): ");

            // ƒê·∫£m b·∫£o min <= max
            if (minPrice > maxPrice) {
                double temp = maxPrice;
                maxPrice = minPrice;
                minPrice = temp;
                System.out.println("Ô∏è ƒê√£ ho√°n ƒë·ªïi gi√° tr·ªã ƒë·ªÉ minPrice <= maxPrice");
            }

            boolean found = false;
            count = 0;

            System.out.println("\n K·∫øt qu·∫£ t√¨m ki·∫øm:");
            System.out.println("=".repeat(50));

            for (Bt_Phone.Phone p : phones1) {
                if (clazz.isInstance(p) && p.getPhonePrice() >= minPrice && p.getPhonePrice() <= maxPrice) {
                    System.out.println(" ƒêi·ªán tho·∫°i th·ª© " + ++count);
                    p.output();
                    System.out.println();
                    found = true;
                }
            }

            if (!found) {
                System.out.printf(" Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i n·∫±m trong kho·∫£ng %,.0f VND ƒë·∫øn %,.0f VND\n",
                        minPrice, maxPrice);
            } else {
                System.out.println(" T√¨m th·∫•y " + count + " ƒëi·ªán tho·∫°i ph√π h·ª£p!");
            }

        } catch (Exception e) {
            System.err.println(" L·ªói t√¨m ki·∫øm theo gi√°: " + e.getMessage());
        }
        writeFile(phones1);
    }

    public static void findByNameToFile(Class<?> clazz) {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            System.out.print(" Nh·∫≠p t√™n ƒëi·ªán tho·∫°i c·∫ßn t√¨m: ");
            String keyword = sc.nextLine().trim();

            if (keyword.isEmpty()) {
                System.out.println(" T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                return;
            }

            boolean found = false;
            count = 0;

            System.out.println("\n K·∫øt qu·∫£ t√¨m ki·∫øm t√™n ch·ª©a: '" + keyword + "'");
            System.out.println("=".repeat(50));

            for (Bt_Phone.Phone p : phones1) {
                if (clazz.isInstance(p)) {
                    if (p.getPhoneName().toLowerCase().contains(keyword.toLowerCase())) {
                        System.out.println(" ƒêi·ªán tho·∫°i th·ª© " + ++count);
                        p.output();
                        System.out.println();
                        found = true;
                    }
                }
            }

            if (!found) {
                System.out.println(" Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i c√≥ t√™n ch·ª©a: '" + keyword + "'");
            } else {
                System.out.println(" T√¨m th·∫•y " + count + " ƒëi·ªán tho·∫°i ph√π h·ª£p!");
            }

        } catch (Exception e) {
            System.err.println(" L·ªói t√¨m ki·∫øm theo t√™n: " + e.getMessage());
        }
        writeFile(phones1);
    }

    public static void findByCompanyToFile(Class<?> clazz) {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            System.out.print(" Nh·∫≠p t√™n h√£ng ƒëi·ªán tho·∫°i c·∫ßn t√¨m: ");
            String keyword = sc.nextLine().trim();

            if (keyword.isEmpty()) {
                System.out.println(" T√™n h√£ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                return;
            }

            boolean found = false;
            count = 0;

            System.out.println("\n K·∫øt qu·∫£ t√¨m ki·∫øm h√£ng ch·ª©a: '" + keyword + "'");
            System.out.println("=".repeat(50));

            for (Bt_Phone.Phone p : phones1) {
                if (clazz.isInstance(p)) {
                    if (p.getPhoneCompany().toLowerCase().contains(keyword.toLowerCase())) {
                        System.out.println(" ƒêi·ªán tho·∫°i th·ª© " + ++count);
                        p.output();
                        System.out.println();
                        found = true;
                    }
                }
            }

            if (!found) {
                System.out.println(" Kh√¥ng t√¨m th·∫•y ƒëi·ªán tho·∫°i c·ªßa h√£ng: '" + keyword + "'");
            } else {
                System.out.println(" T√¨m th·∫•y " + count + " ƒëi·ªán tho·∫°i ph√π h·ª£p!");
            }

        } catch (Exception e) {
            System.err.println(" L·ªói t√¨m ki·∫øm theo h√£ng: " + e.getMessage());
        }
        writeFile(phones1);
    }

    public static void menuDeleteToFile() {
        List<Phone> phones1 = readFile(PATH_PHONE_FILE);
        try {
            System.out.println("=".repeat(80));
            System.out.println("                    X√ìA ƒêI·ªÜN THO·∫†I");
            System.out.println("=".repeat(80));

            String id = getValidPhoneId("x√≥a");

            boolean isFound = false;
            for (int i = 0; i < phones1.size(); i++) {
                Phone p = phones1.get(i);
                if (p.getPhoneId().equalsIgnoreCase(id)) {
                    isFound = true;

                    System.out.println(" T√¨m th·∫•y ƒëi·ªán tho·∫°i:");
                    p.output();

                    System.out.print(" B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ƒëi·ªán tho·∫°i n√†y (Y/N)? ");
                    String confirm = sc.nextLine().trim();

                    if (confirm.equalsIgnoreCase("y")) {
                        phones1.remove(i);
                        System.out.println(" X√≥a th√†nh c√¥ng!");
                    } else {
                        System.out.println(" H·ªßy x√≥a.");
                    }
                    break;
                }
            }

            if (!isFound) {
                System.out.println(" Kh√¥ng t√¨m th·∫•y ID mu·ªën x√≥a!");
            }

        } catch (Exception e) {
            System.err.println(" L·ªói x√≥a: " + e.getMessage());
        }
        writeFile(phones1);
    }
}

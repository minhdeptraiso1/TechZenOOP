package Bt_Phone;

import Bt_Phone.exception_phone.InvalidPhoneDataException;
import Bt_Phone.exception_phone.PhoneValidationException;

import java.util.Scanner;

public class OldPhone extends Phone implements Promotion {
    private int batteryStatus;  // t√¨nh tr·∫°ng pin: 0-100%

    // ==================== CONSTRUCTORS ====================

    public OldPhone() {
        super();
    }

    public OldPhone(String phoneId, String phoneName, double phonePrice,
                    String phoneWarranty, String phoneType, String phoneCompany,
                    int batteryStatus) throws InvalidPhoneDataException {
        super(phoneId, phoneName, phonePrice, phoneWarranty, phoneType, phoneCompany);
        try {
            this.setBatteryStatus(batteryStatus);
        } catch (IllegalArgumentException e) {
            throw new InvalidPhoneDataException("L·ªói kh·ªüi t·∫°o OldPhone: " + e.getMessage(), e);
        }
    }

    // ==================== GETTER & SETTER WITH VALIDATION ====================

    public int getBatteryStatus() {
        return batteryStatus;
    }

    public void setBatteryStatus(int batteryStatus) throws IllegalArgumentException {
        if (batteryStatus < 0 || batteryStatus > 100) {
            throw new IllegalArgumentException("T√¨nh tr·∫°ng pin ph·∫£i t·ª´ 0-100%!");
        }
        this.batteryStatus = batteryStatus;
    }

    // ==================== INPUT METHOD ====================

    @Override
    public void input(Scanner sc) {
        // G·ªçi ph∆∞∆°ng th·ª©c input c·ªßa l·ªõp cha
        super.input(sc);

        // Nh·∫≠p t√¨nh tr·∫°ng pin v·ªõi try-catch
        while (true) {
            try {
                System.out.print("Nh·∫≠p t√¨nh tr·∫°ng pin hi·ªán t·∫°i (0-100%): "); // ‚úÖ S·ª≠a "Nh√¢p" -> "Nh·∫≠p"
                String batteryInput = sc.nextLine().trim();

                // Ki·ªÉm tra r·ªóng
                if (batteryInput.isEmpty()) {
                    throw new Exception("T√¨nh tr·∫°ng pin kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
                }

                // Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë
                if (!batteryInput.matches("\\d+")) {
                    throw new Exception("T√¨nh tr·∫°ng pin ph·∫£i l√† s·ªë nguy√™n!");
                }

                int battery = Integer.parseInt(batteryInput);

                // S·ª≠ d·ª•ng setter ƒë·ªÉ validate
                this.setBatteryStatus(battery);
                break;

            } catch (NumberFormatException e) {
                System.out.println("L·ªói: T√¨nh tr·∫°ng pin ph·∫£i l√† s·ªë nguy√™n!");
                System.out.println("Vui l√≤ng nh·∫≠p l·∫°i!\n");
            } catch (IllegalArgumentException e) {
                System.out.println("L·ªói: " + e.getMessage());
                System.out.println("Vui l√≤ng nh·∫≠p l·∫°i!\n");
            } catch (Exception e) {
                System.out.println("L·ªói: " + e.getMessage());
                System.out.println("Vui l√≤ng nh·∫≠p l·∫°i!\n");
            }
        }
    }

    // ==================== PROMOTION INTERFACE ====================

    @Override
    public void promote(int ratio) throws IllegalArgumentException, ArithmeticException {
        if (ratio < 0 || ratio > 100) {
            throw new IllegalArgumentException("T·ª∑ l·ªá khuy·∫øn m√£i ph·∫£i t·ª´ 0-100%!");
        }

        try {
            double currentPrice = getPhonePrice();
            if (currentPrice <= 0) {
                throw new ArithmeticException("Gi√° hi·ªán t·∫°i ph·∫£i l·ªõn h∆°n 0 ƒë·ªÉ √°p d·ª•ng khuy·∫øn m√£i!");
            }

            double discountAmount = currentPrice * (ratio / 100.0);
            double newPrice = currentPrice - discountAmount;

            // ƒê·∫£m b·∫£o gi√° sau khuy·∫øn m√£i kh√¥ng √¢m
            if (newPrice <= 0) {
                throw new ArithmeticException("Gi√° sau khuy·∫øn m√£i kh√¥ng th·ªÉ b·∫±ng 0 ho·∫∑c √¢m!");
            }

            this.setPhonePrice(newPrice);

            System.out.println("‚úÖ ƒê√£ √°p d·ª•ng khuy·∫øn m√£i " + ratio + "%:");
            System.out.println("   Gi√° c≈©: " + String.format("%,.0f VND", currentPrice));
            System.out.println("   Gi·∫£m: " + String.format("%,.0f VND", discountAmount));
            System.out.println("   Gi√° m·ªõi: " + String.format("%,.0f VND", newPrice));

        } catch (IllegalArgumentException e) {
            throw new ArithmeticException("Kh√¥ng th·ªÉ set gi√° m·ªõi: " + e.getMessage());
        }
    }

    // ==================== OUTPUT METHOD ====================

    @Override
    public void output() {
        try {
            super.output();
            System.out.println("T√¨nh tr·∫°ng pin: " + this.batteryStatus + "%");
            System.out.println("ƒê√°nh gi√° pin: " + getBatteryStatusText());
            System.out.println("Gi√° ƒë√£ ƒëi·ªÅu ch·ªânh: " + String.format("%,.0f VND", this.phonePrice()));
            System.out.println("============================");
        } catch (ArithmeticException e) {
            System.err.println("L·ªói t√≠nh to√°n gi√° ƒëi·ªÅu ch·ªânh: " + e.getMessage());
        } catch (Exception e) {
            System.err.println("L·ªói khi in th√¥ng tin OldPhone: " + e.getMessage());
        }
    }

    // ==================== PRICE CALCULATION ====================

    @Override
    public double phonePrice() throws ArithmeticException {
        try {
            double basePrice = this.getPhonePrice();
            if (basePrice <= 0) {
                throw new ArithmeticException("Gi√° g·ªëc ph·∫£i l·ªõn h∆°n 0!");
            }

            // ‚úÖ S·ª¨A LOGIC: Gi√° gi·∫£m theo t√¨nh tr·∫°ng pin, kh√¥ng ph·∫£i nh√¢n
            // Pin t·ªët (80-100%): gi·ªØ nguy√™n gi√°
            // Pin trung b√¨nh (50-79%): gi·∫£m 10-30%
            // Pin y·∫øu (20-49%): gi·∫£m 30-50%
            // Pin r·∫•t y·∫øu (0-19%): gi·∫£m 50-70%

            double adjustmentRatio;
            if (batteryStatus >= 80) {
                adjustmentRatio = 1.0; // Gi·ªØ nguy√™n 100%
            } else if (batteryStatus >= 50) {
                adjustmentRatio = 0.9 - (80 - batteryStatus) * 0.02 / 30.0; // 90% - 70%
            } else if (batteryStatus >= 20) {
                adjustmentRatio = 0.7 - (50 - batteryStatus) * 0.02 / 30.0; // 70% - 50%
            } else {
                adjustmentRatio = 0.5 - batteryStatus * 0.02 / 20.0; // 50% - 30%
            }

            return basePrice * adjustmentRatio;

        } catch (Exception e) {
            throw new ArithmeticException("L·ªói t√≠nh to√°n gi√° ƒëi·ªÅu ch·ªânh: " + e.getMessage());
        }
    }

    // ==================== COMPARABLE ====================

    @Override
    public int compareTo(Phone other) {
        if (other == null) {
            throw new NullPointerException("Kh√¥ng th·ªÉ so s√°nh v·ªõi null!");
        }

        try {
            // ‚úÖ S·ª¨A: So s√°nh theo gi√° ƒë√£ ƒëi·ªÅu ch·ªânh (phonePrice()), kh√¥ng ph·∫£i gi√° g·ªëc
            double thisAdjustedPrice = this.phonePrice();
            double otherPrice = other.phonePrice();

            return Double.compare(thisAdjustedPrice, otherPrice);

        } catch (ArithmeticException e) {
            System.err.println("L·ªói khi so s√°nh gi√°: " + e.getMessage());
            // Fallback: so s√°nh theo gi√° g·ªëc
            return Double.compare(this.getPhonePrice(), other.getPhonePrice());
        }
    }

    // ==================== VALIDATION METHOD ====================

    @Override
    public void validate() throws PhoneValidationException {
        // Validate l·ªõp cha tr∆∞·ªõc
        super.validate();

        // Validate ri√™ng cho OldPhone
        if (batteryStatus < 0 || batteryStatus > 100) {
            throw new PhoneValidationException("T√¨nh tr·∫°ng pin ph·∫£i t·ª´ 0-100%!");
        }
    }

    // ==================== UTILITY METHODS ====================

    /**
     * L·∫•y m√¥ t·∫£ t√¨nh tr·∫°ng pin
     *
     * @return m√¥ t·∫£ pin
     */
    public String getBatteryStatusText() {
        if (batteryStatus >= 80) {
            return "R·∫•t t·ªët";
        } else if (batteryStatus >= 50) {
            return "T·ªët";
        } else if (batteryStatus >= 20) {
            return "Trung b√¨nh";
        } else {
            return "Y·∫øu";
        }
    }

    /**
     * Ki·ªÉm tra pin c√≥ c·∫ßn thay kh√¥ng
     *
     * @return true n·∫øu pin c·∫ßn thay (< 20%)
     */
    public boolean needBatteryReplacement() {
        return batteryStatus < 20;
    }

    /**
     * T√≠nh t·ª∑ l·ªá gi·∫£m gi√° do pin
     *
     * @return t·ª∑ l·ªá gi·∫£m (0-70%)
     */
    public double getBatteryDiscountRatio() {
        try {
            double originalPrice = this.getPhonePrice();
            double adjustedPrice = this.phonePrice();
            return ((originalPrice - adjustedPrice) / originalPrice) * 100;
        } catch (ArithmeticException e) {
            return 0;
        }
    }

    /**
     * √Åp d·ª•ng khuy·∫øn m√£i d·ª±a tr√™n t√¨nh tr·∫°ng pin
     */
    public void applyBatteryBasedPromotion() {
        try {
            if (batteryStatus < 50) {
                int extraDiscount = Math.max(5, (50 - batteryStatus) / 5);
                promote(extraDiscount);
                System.out.println("üîã √Åp d·ª•ng khuy·∫øn m√£i ƒë·∫∑c bi·ªát do pin y·∫øu!");
            }
        } catch (Exception e) {
            System.err.println("Kh√¥ng th·ªÉ √°p d·ª•ng khuy·∫øn m√£i pin: " + e.getMessage());
        }
    }

    // ==================== EQUALS & HASHCODE ====================

    @Override
    public boolean equals(Object o) {
        if (!super.equals(o)) return false;
        if (!(o instanceof OldPhone oldPhone)) return false;
        return batteryStatus == oldPhone.batteryStatus;
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(super.hashCode(), batteryStatus);
    }

    // ==================== TO STRING ====================

    @Override
    public String toString() {
        return String.format("OldPhone{%s, battery=%d%%, adjustedPrice=%.0f}",
                super.toString().replace("Phone{", "").replace("}", ""),
                batteryStatus,
                phonePrice());
    }
}
